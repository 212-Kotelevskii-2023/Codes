#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <string>
#include <time.h>
#include <sstream>

//#include <random>

#define eps 0.05
#define eps_offset 0.001

// splot 'C:\Users\Андрей\Desktop\прога на ЭВМ\прога на ЭВМ 3\Rover\Gauss Bell.txt' with lines

using namespace std;


class Hummock {

public:
    Hummock(double x_0, double y_0, double sigma_x, double sigma_y, double sigma_xy, double height);
    Hummock();

    double Gauss_Bell(double x, double y);

private:
    double x_0, y_0;  // координаты начала Гауссиана
    double sigma_x, sigma_y, sigma_xy;  // нужно чтоб выполнялось sxy^2 >= 2*sx*sy
    double height; // высота Гауссиана
};


struct Sphere {
    Sphere(double Sx_0, double Sy_0, double R);
    Sphere();

    double Sx_0, Sy_0; // координаты центра сферы
    double R; // радиус сферы
};
class Stone {

public:

    Stone(int stones_number, double max_radius, int stone_x_bound, int stone_y_bound);
    Stone();

    void Stones_Random(vector<Sphere> &Sp);

private:
    int stones_number;
    double max_radius;
    int stone_x_bound, stone_y_bound; // границы области
};


struct Log {
    Log(double x_l, double y_l, double x_r, double y_r, double rad);
    Log();

    double x_l, y_l;
    double x_r, y_r;
    double rad;
};
class Logs {

public:
    Logs(int logs_number, double max_l_rad, int logs_x_bound, int logs_y_bound, double max_log_length);
    Logs();

    void Logs_Random(vector<Log> &Lg);

private:
    int logs_number;
    double max_l_rad;
    int logs_x_bound, logs_y_bound;
    double max_log_length;
};


class Off_road {
    friend class Stone;
    friend class Logs;
public:
    int x_bound, y_bound; // границы области

    Off_road(int bells_number, int max_height, int x_bound, int y_bound);
    Off_road();

    void Random();

    double Comp_Gauss_Bell(double x, double y);

    double Off_Road_plus_Stones(double x, double y, vector<Sphere> &Sp);

    double Off_Road_S_plus_Logs(double x, double y, vector<Sphere> &Sp, vector<Log> &Lg);

    void output(ofstream &file, vector<Sphere> &Sp, vector<Log> &Lg, double resolution);

private:
    int bells_number; // количество холмов/низин
    int max_height; // максимальная высота/глубина

    vector<Hummock> Hills; // бездорожье
};


class Boundary {
    friend class Control;
public:

    Boundary(string configuration_file_name): configuration_file_name(configuration_file_name) {}
    Boundary() = default;


    bool search_word(const string &filename, const string &word, int *number_line) {
        ifstream file(filename);
        string line;

        *number_line = 0;
        while (getline(file, line)) {
            *number_line = *number_line + 1;
            if (line.find(word) != string::npos)
                return true;
        }

        file.close();
        return false;
    }

    string read_i_line(const string &filename, int i_line) {
        ifstream file(configuration_file_name);

        string line;
        int temp_line = 1;
        while (temp_line <= i_line && getline(file, line)) {
            if (temp_line == i_line) {
                file.close();
                return line;
            }
            temp_line++;
        }

        file.close();
        return "";
    }

    double find_double_in_string(const string &str) {
        stringstream ss;
        double number;

        ss << str;

        while (!ss.eof()) {
            if (ss >> number)
                return number;
            ss.clear();
            ss.ignore();
        }

        return -1;
    }

    string find_brackts_word(const string &str) {
        string word;

        size_t start = str.find('"');
        if (start != string::npos) {
            size_t end = str.find('"', start + 1);

            if (end != string::npos) {
                start++;
                word = str.substr(start, end - start);
            }
        }

        return word;
    }

    bool read_files_information() {
        ifstream file(configuration_file_name);
        int line_number;

        if (!search_word(configuration_file_name, "Files used in the project", &line_number))
            return false;

        string line;

        line = read_i_line(configuration_file_name, line_number + 1);
        field_coordinates = find_brackts_word(line);
        line = read_i_line(configuration_file_name, line_number + 2);
        boundary_logs_name = find_brackts_word(line);
        line = read_i_line(configuration_file_name, line_number + 3);
        control_logs_name = find_brackts_word(line);

        file.close();

        boundary_logs.open(boundary_logs_name, ios::app);
        boundary_logs << "Поступившая команда: прочесть имена файлов, используемых в проекте\nРезультат выполнения:\n";
        boundary_logs << " Координаты поля: " << field_coordinates << endl;
        boundary_logs << " Boundary: " << boundary_logs_name << endl;
        boundary_logs << " Control: " << control_logs_name << "\n\n";
        boundary_logs.close();

        return true;
    }


    bool read_field_parameters() {
        ifstream file(configuration_file_name);
        int line_number;

        if (!search_word(configuration_file_name, "Field Parameters", &line_number))
            return false;

        string line;
        line = read_i_line(configuration_file_name, line_number + 1);
        x_field_bound = (int)find_double_in_string(line);
        line = read_i_line(configuration_file_name, line_number + 2);
        y_field_bound = (int)find_double_in_string(line);
        line = read_i_line(configuration_file_name, line_number + 3);
        field_resolution = find_double_in_string(line);

        file.close();

        boundary_logs.open(boundary_logs_name, ios::app);
        boundary_logs << "Поступившая команда: прочесть параметры поля\nРезультат выполнения:\n";
        boundary_logs << "Размер по X: " << x_field_bound << endl;
        boundary_logs << "Размер по Y: " << y_field_bound << endl;
        boundary_logs << "Разрешение вывода: " << field_resolution << "\n\n";
        boundary_logs.close();

        return true;
    }

    bool read_hills_information() {
        ifstream file(configuration_file_name);
        int line_number;

        if (!search_word(configuration_file_name, "Information about the hills", &line_number))
            return false;

        string line;
        line = read_i_line(configuration_file_name, line_number + 1);
        f_number_hills = (int)find_double_in_string(line);
        line = read_i_line(configuration_file_name, line_number + 2);
        f_max_hills_height = (int)find_double_in_string(line);

        file.close();

        boundary_logs.open(boundary_logs_name, ios::app);
        boundary_logs << "Поступившая команда: прочесть параметры холмов\nРезультат выполнения:\n";
        boundary_logs << "Количество: " << f_number_hills << endl;
        boundary_logs << "Максимальная высота: " << f_max_hills_height << "\n\n";
        boundary_logs.close();

        return true;
    }

    bool read_stones_information() {
        ifstream file(configuration_file_name);
        int line_number;

        if (!search_word(configuration_file_name, "Information about stones", &line_number))
            return false;

        string line;
        line = read_i_line(configuration_file_name, line_number + 1);
        f_number_stones = (int)find_double_in_string(line);
        line = read_i_line(configuration_file_name, line_number + 2);
        f_max_stones_height = find_double_in_string(line);

        file.close();

        boundary_logs.open(boundary_logs_name, ios::app);
        boundary_logs << "Поступившая команда: прочесть параметры камней\nРезультат выполнения:\n";
        boundary_logs << "Количество: " << f_number_stones << endl;
        boundary_logs << "Максимальная высота: " << f_max_stones_height << "\n\n";
        boundary_logs.close();

        return true;
    }

    bool read_logs_information() {
        ifstream file(configuration_file_name);
        int line_number;

        if (!search_word(configuration_file_name, "Information about logs", &line_number))
            return false;

        string line;
        line = read_i_line(configuration_file_name, line_number + 1);
        f_number_logs = (int)find_double_in_string(line);
        line = read_i_line(configuration_file_name, line_number + 2);
        f_max_logs_diam = find_double_in_string(line);
        line = read_i_line(configuration_file_name, line_number + 3);
        f_max_logs_length = find_double_in_string(line);

        file.close();

        boundary_logs.open(boundary_logs_name, ios::app);
        boundary_logs << "Поступившая команда: прочесть параметры брёвен\nРезультат выполнения:\n";
        boundary_logs << "Количество: " << f_number_logs << endl;
        boundary_logs << "Максимальный диаметр: " << f_max_logs_diam << endl;
        boundary_logs << "Максимальная длина: " << f_max_logs_length << "\n\n";
        boundary_logs.close();

        return true;
    }

    void filling_in_parameters() {
        read_files_information();
        read_field_parameters();
        read_hills_information();
        read_stones_information();
        read_logs_information();

    }

    void show() {
        cout << x_field_bound << endl << y_field_bound << endl << field_resolution << "\n\n";
        cout << f_number_hills << endl << f_max_hills_height << "\n\n";
        cout << f_number_stones << endl << f_max_stones_height << "\n\n";
        cout << f_number_logs << endl << f_max_logs_diam << endl << f_max_logs_length << "\n\n";
        cout <<  configuration_file_name << endl << field_coordinates << endl << boundary_logs_name << endl << control_logs_name << "\n\n";
    }


private:

    ofstream boundary_logs;

    // файлы
    string configuration_file_name;
    string field_coordinates;
    string boundary_logs_name;
    string control_logs_name;

    // параметры поля
    int x_field_bound;
    int y_field_bound;
    double field_resolution;

    // параметры холмов
    int f_number_hills;
    int f_max_hills_height;

    // параметры камней
    int f_number_stones;
    double f_max_stones_height;

    // параметры брёвен
    int f_number_logs;
    double f_max_logs_diam;
    double f_max_logs_length;

};


class Control {

public:
    //Control(string control_filename): control_filename(control_filename) {}
    //Control() = default;
    Boundary B{"configuration_file.txt"};

    void record_filenames() {
        B.read_files_information();
        control_filename = B.control_logs_name;

        control_logs.open(control_filename, ios::app);
        control_logs << "Команда: прочесть имена файлов, используемых в проекте\n\n";
        control_logs.close();
    }

    void create_field() {
        B.read_field_parameters();

        control_logs.open(control_filename, ios::app);
        control_logs << "Команда: прочесть параметры поля\n\n";
        control_logs.close();
    }

    void create_hills() {
        B.read_hills_information();

        control_logs.open(control_filename, ios::app);
        control_logs << "Команда: прочесть параметры холмов\n\n";
        control_logs.close();
    }

    void create_stones() {
        B.read_stones_information();

        control_logs.open(control_filename, ios::app);
        control_logs << "Команда: прочесть параметры камней\n\n";
        control_logs.close();
    }

    void create_logs() {
        B.read_logs_information();

        control_logs.open(control_filename, ios::app);
        control_logs << "Команда: прочесть параметры брёвен\n\n";
        control_logs.close();
    }

private:
    ofstream control_logs;
    string control_filename;

};

int main() {

    //string conf_f_name = "configuration_file.txt";

    //Boundary *B = new Boundary(conf_f_name);
    Control *C = new Control;

    /* B->filling_in_parameters();
    B->show(); */
    //B->read_files_information();

    C->record_filenames();
    C->create_field();
    C->create_hills();
    C->create_stones();
    C->create_logs();

    //delete B;
    delete C;

    /* //srand(time(NULL));
    ofstream fout("Gauss Bell.txt");

    int X_B, Y_B; X_B = Y_B = 5;
    double resolution = 0.05;

    Off_road *Or = new Off_road(0, 1, X_B, Y_B);
    Or->Random();

    vector<Sphere> Sp;
    Stone *St = new Stone(0, 0.05, Or->x_bound, Or->y_bound);
    St->Stones_Random(Sp);

    vector<Log> Lg;
    Logs *Ls = new Logs(1, 10, Or->x_bound, Or->y_bound, 5);
    Ls->Logs_Random(Lg);

    Or->output(fout, Sp, Lg, resolution);

    delete Or;
    delete St;
    delete Ls;

    fout.close(); */


    return 0;
}








Hummock::Hummock(double x_0, double y_0, double sigma_x, double sigma_y, double sigma_xy, double height) {  // конструктор для обращения
    this->x_0 = x_0; this->y_0 = y_0;
    this->sigma_x = sigma_x; this->sigma_y = sigma_y;
    this->sigma_xy = sigma_xy;
    this->height = height;
}
Hummock::Hummock() = default;

double Hummock::Gauss_Bell(double x, double y) {  // формула Гауссиана с началом в x_0, y_0
    double degree = -(pow(x - x_0, 2) / (2 * pow(sigma_x, 2)) + (x - x_0) * (y - y_0) / pow(sigma_xy, 2) + pow(y - y_0, 2) / (2 * pow(sigma_y, 2))) / 5; // деление для пологости
    return height * exp(degree);
}

Sphere::Sphere(double Sx_0, double Sy_0, double R): Sx_0(Sx_0), Sy_0(Sy_0), R(R) {}
Sphere::Sphere() = default;

Stone::Stone(int stones_number, double max_radius, int stone_x_bound, int stone_y_bound):
        stones_number(stones_number), max_radius(max_radius), stone_x_bound(stone_x_bound), stone_y_bound(stone_y_bound) {}
Stone::Stone() {}; // default

void Stone::Stones_Random(vector<Sphere> &Sp) {
    double x_0, y_0, R_0;

    while (stones_number--) {
        x_0 = (double)rand() / RAND_MAX * stone_x_bound;
        y_0 = (double)rand() / RAND_MAX * stone_y_bound;
        R_0 = (double)rand() / RAND_MAX * max_radius;

        Sp.push_back(Sphere(x_0, y_0, R_0));
    }
}

Log::Log(double x_l, double y_l, double x_r, double y_r, double rad):
        x_l(x_l), y_l(y_l), x_r(x_r), y_r(y_r), rad(rad) {}
Log::Log() = default;

Logs::Logs(int logs_number, double max_l_rad, int logs_x_bound, int logs_y_bound, double max_log_length):
        logs_number(logs_number), max_l_rad(max_l_rad), logs_x_bound(logs_x_bound), logs_y_bound(logs_y_bound), max_log_length(max_log_length) {}
Logs::Logs() {};

void Logs::Logs_Random(vector<Log> &Lg) {
    double x_l_0, y_l_0, x_r_0, y_r_0, rad_0;

    while (logs_number--) {
        x_l_0 = (double)rand() / RAND_MAX * logs_x_bound;
        y_l_0 = (double)rand() / RAND_MAX * logs_y_bound;

        x_r_0 = (double)rand() / RAND_MAX * logs_x_bound;
        y_r_0 = (double)rand() / RAND_MAX * logs_y_bound;

        while (sqrt(pow(x_r_0 - x_l_0, 2) + pow(y_r_0 - y_l_0, 2)) > max_log_length) {
            x_r_0 = (x_r_0 + x_l_0) / 2;
            y_r_0 = (y_r_0 + y_l_0) / 2;
        }

        rad_0 = (1.0/3) * sqrt(pow(x_r_0 - x_l_0, 2) + pow(y_r_0 - y_l_0, 2));

        Lg.push_back(Log(x_l_0, y_l_0, x_r_0, y_r_0, rad_0));
    }
}

void Off_road::Random() {  // генерация параметров
    int b_n = bells_number;
    while (b_n--) { // заполняем вектор Hills
        double x0, y0, sx, sy, sxy, ht;

        x0 = (double)rand() / RAND_MAX * x_bound;
        y0 = (double)rand() / RAND_MAX * y_bound;
        sx = (double)rand() / RAND_MAX; sy = (double)rand() / RAND_MAX;
        // sxy = (double)rand() / RAND_MAX;  // надо добавить условие положительности определителя
        while (4*sx*sy > 1) {
            sx /= 2; sy /= 2;
        }
        sxy = sqrt(4*sx*sy);

        ht = (double)rand() / RAND_MAX * max_height * pow(-1, rand());

        Hills.push_back(Hummock(x0, y0, sx, sy, sxy, ht));
    }
}

Off_road::Off_road(int bells_number, int max_height, int x_bound, int y_bound):
        bells_number(bells_number), max_height(max_height),  x_bound(x_bound), y_bound(y_bound) {}
Off_road::Off_road() {} // default

double Off_road::Comp_Gauss_Bell(double x, double y) { // координаты точке на бездорожье
    double H = 0;

    for (int i = 0; i < (int)Hills.size(); i++) {
        H += Hills[i].Gauss_Bell(x, y);
    }

    return H / bells_number;
}

double Off_road::Off_Road_plus_Stones(double x, double y, vector<Sphere> &Sp) { // добавляем камни
    double H;

    if (bells_number == 0)
        H = 0;
    else
        H = Comp_Gauss_Bell(x, y);

    for (int i = 0; i < (int)Sp.size(); i++) { // может быть ошибка из-за преобразования типа
        if (abs(x - Sp[i].Sx_0) < Sp[i].R && abs(y - Sp[i].Sy_0) < Sp[i].R)
            H += sqrt(pow(Sp[i].R, 2) - pow(Sp[i].Sx_0 - x, 2) - pow(Sp[i].Sy_0 -  y, 2));
        else
            continue;
    }

    return H;
}

double Off_road::Off_Road_S_plus_Logs(double x, double y, vector<Sphere> &Sp, vector<Log> &Lg) { // добавляем брёвна
    double H = Off_Road_plus_Stones(x, y, Sp);

    for (int i = 0; i < (int)Lg.size(); i++) { // может быть ошибка из-за преобразования типа
        double a = -(Lg[i].y_r - Lg[i].y_l) / (Lg[i].x_r - Lg[i].x_l);
        double b = -(Lg[i].y_l * Lg[i].x_r - Lg[i].y_r * Lg[i].x_l) / (Lg[i].x_r - Lg[i].x_l);
        double dist = abs(a * x + y + b) / sqrt(pow(a, 2) + pow(b, 2) + 1);

        double b_1 = Lg[i].x_r - a * Lg[i].y_r;
        double b_2 = Lg[i].x_l - a * Lg[i].y_l;
        double L_1 = - x + a * y + b_1;
        double L_2 = - x + a * y + b_2;

        if (dist <= Lg[i].rad && L_1 * L_2 <= 0)
            H += sqrt(pow(Lg[i].rad, 2) - pow(dist, 2));
        else
            continue;
    }

    return H;
}

void Off_road::output(ofstream &file, vector<Sphere> &Sp, vector<Log> &Lg, double resolution) {  // вывод координат композиции Гауссианов в файл
    for (double i = -5; i <= x_bound + 5; i += resolution) {
        for (double j = -5; j <= y_bound + 5; j += resolution) {
            file << i << " " << j << " " << Off_Road_S_plus_Logs(i, j, Sp, Lg) << endl;
        }
    }
}





